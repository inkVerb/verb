#!/usr/bin/bash
#inkVerbMaker! verb.ink

# This makes the initial inkVerb Verber server with a "boss" sudoer user, new SSH login port, the name286 namespace for setup
## Prerequisite: Copy the Vubuntu directory contents (verb) to /var/local/
## Prerequisite: make-preverber

# NOTE on MySQL:
## The MySQL root password will be saved to a filename in the inst directory for your reference
## This file is moved to verb/configs by setup
## On a healthy Verber server, you will never need the MySQL root password except for special maintanence
## Verber can create other superusers for MySQL with grant privileges for login to PHPMyAdmin
## Should the MySQL root password become necessary it is a headache if lost. Hence, it is saved in this one lo/usr/bin/cation and you don't need to keep track of it.

# How to use:
## ./make-verber-lemp [swap-size, choose GB: 1, 2, 4, 8, 16, 32, 64 - optional (2 default, must be set for root password)] [mysql root password - optional]

# Eg:
## ./make-verber-lemp 1 mysqlrootpass
## ./make-verber-lemp 4
## ./make-verber-lemp 2 chewcud62


# Setup check
if [ -f "/opt/verb/inst/make-preverber" ]; then
  /usr/bin/echo "Run make-preverber first, then try again."
exit 8; fi
# File check
if [ ! -f "/opt/verb/inst/make-verber-lemp" ]; then
  /usr/bin/echo "I'm not where I'm supposed to be, I quit."
exit 8; fi

# swap size
if [ -z "$1" ]; then
swapsizemake="2"
else
swapsizemake="$1"
fi

# MySQL root password
if [ -z "$2" ]; then
mysqlpass=$(/usr/bin/pwgen -0 -1 -A -B 11)
else
mysqlpass="$2"
fi

# MySQL boss password
mysqlbosspass=$(/usr/bin/pwgen -s -1 10)

# Verify SSH Directory
cd ~ || exit 6
if [ ! -d ~/.ssh ]; then
/usr/bin/mkdir .ssh
fi

# Update Keyring
/usr/bin/pacman -Sy archlinux-keyring --noconfirm
# Update Packages
/usr/bin/pacman -Syyu --noconfirm --needed
/usr/bin/su worker -c '/usr/bin/yay -Syyu --noconfirm --needed'
#/usr/local/bin/yeo -Syyu --noconfirm --needed

# Swap
/opt/verb/serfs/setswapsize ${swapsizemake}; wait
## Enable swap at next startup
#DEV already done by setswapsize
# /usr/bin/echo "/var/swap.img    none    swap    sw    0    0" >> /etc/fstab

# Live patch
## Learn more here https://wiki.archlinux.org/title/Kernel_live_patching
#/usr/bin/su worker -c '/usr/bin/yay --noconfirm -S kpatch'
##/usr/local/bin/yeo --noconfirm -S kpatch

# Link serfs & tools to boss box
/usr/bin/ln -sfn /opt/verb/serfs /opt/verb/boss/
/usr/bin/ln -sfn /opt/verb/tools /opt/verb/boss/

# Link setup to serfs
/usr/bin/ln -sfn /opt/verb/inst/setup /opt/verb/serfs/

# Link verb to root home
/usr/bin/ln -sfn /opt/verb /root/

# Record the MySQL root password
/usr/bin/mkdir -p /opt/verb/conf/sql
/usr/bin/echo "${mysqlpass}" > /opt/verb/conf/sql/mysqlrootpassword

#  LEMP Server
## Web directory
/usr/bin/mkdir -p /srv/www/html
/usr/bin/useradd -g www www
/usr/bin/chmod u+w /srv/www/html
/usr/bin/chown -R www:www /srv/www/html

## Snakeoil install (small file just so the server works)
/usr/bin/mkdir -p /etc/ssl/server
cd /etc/ssl/server || exit 6
/usr/bin/rm -f server.key
/usr/bin/openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:512 -out server.key
/usr/bin/chmod 400 server.key
/usr/bin/rm -f /etc/ssl/server/server.csr
/usr/bin/openssl req -new -sha256 -key server.key -out server.csr \
    -subj "/C=/ST=/L=/O=/OU=/CN=/emailAddress=/unstructuredName=/"
/usr/bin/openssl x509 -req -days 1095 -in server.csr -signkey server.key -out server.crt
/usr/bin/rm -f /etc/ssl/server/server.csr

## Diffie-Helman Group file (small file just so the server works)
/usr/bin/rm -f /etc/ssl/server/dhparams.pem
/usr/bin/openssl dhparam -out /etc/ssl/server/dhparams.pem 512 # Nginx will reject this until setup builds a unique one at 2048; so ignore any error 'dh key too small'
/usr/bin/chmod 600 /etc/ssl/server/dhparams.pem
cd $OLDPWD || exit 6

# Nginx
/usr/bin/pacman -S --noconfirm --needed nginx
e="$?"; [[ "$e" = "0" ]] || /usr/bin/echo 'Failed: !!'; exit "$e"
/usr/bin/mkdir -p /etc/nginx

## Nginx Settings
/usr/bin/cat <<'EOF' > /etc/nginx/nginx.conf
user http;
worker_processes auto;
worker_cpu_affinity auto;

events {
    multi_accept on;
    worker_connections 1024;
}

http {
    # https://serverfault.com/a/419851/487033 all server names served are stored in a [hash table for lookup](http://nginx.org/en/docs/hash.html), more served means this must increase, either server_names_hash_max_size and/or the server_names_hash_bucket_size below
    server_names_hash_max_size 1024;
    server_names_hash_bucket_size 128;
    charset utf-8;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    log_not_found off;
    types_hash_max_size 4096;
    client_max_body_size 1000M;

    # SSL
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

    # MIME
    include mime.types;
    default_type application/octet-stream;

    # logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # load configs
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
EOF

## Nginx site defaults
/usr/bin/mkdir -p /etc/nginx/conf.d
/usr/bin/cat <<'EOF' > /etc/nginx/conf.d/default.conf
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  listen 443 ssl http2 default_server;
  listen [::]:443 ssl http2 default_server;
  server_name _;

  location / {
    root /etc/nginx/default;
    index index.htm index.html;
  }

  ssl_certificate /etc/ssl/server/server.crt;
  ssl_certificate_key /etc/ssl/server/server.key;
  ssl_dhparam /etc/ssl/server/dhparams.pem;

  #return 403;

}
EOF
/usr/bin/mkdir -p /etc/nginx/default
/usr/bin/cat <<'EOF' > /etc/nginx/default/index.htm
<!DOCTYPE html>
<html>
<head><title>Hey, Boo!</title></head>
<body><h1 style="text-align:center">Hey, Boo!</h1><hr></body>
</html>
EOF
/usr/bin/chown -R www:www /etc/nginx/default

## PHP
/usr/bin/pacman -S --noconfirm --needed php php-fpm
e="$?"; [[ "$e" = "0" ]] || /usr/bin/echo 'Failed: !!'; exit "$e"

## PHP-FPM
/usr/bin/cat <<'EOF' > /etc/nginx/php_fastcgi.conf

# 404
  try_files $fastcgi_script_name =404;

# default fastcgi_params
  include fastcgi_params;

# fastcgi settings
  fastcgi_pass                    unix:/run/php-fpm/php-fpm.sock;
  fastcgi_index                   index.php;
  fastcgi_buffers                 8 16k;
  fastcgi_buffer_size             32k;

# fastcgi params
  fastcgi_param DOCUMENT_ROOT     $realpath_root;
  fastcgi_param SCRIPT_FILENAME   $realpath_root$fastcgi_script_name;
  #fastcgi_param PHP_ADMIN_VALUE  "open_basedir=$base/:/usr/lib/php/:/tmp/";

EOF
### Security extensions
echo 'security.limit_extensions = .php .html .htm .shtml' >> /etc/php/php-fpm.d/www.conf
### Web user
/usr/bin/sed -i "s?user = http?user = www?" /etc/php/php-fpm.d/www.conf
/usr/bin/sed -i "s?group = http?group = www?" /etc/php/php-fpm.d/www.conf
/usr/bin/sed -i "s?listen.owner = http?listen.owner = www?" /etc/php/php-fpm.d/www.conf
/usr/bin/sed -i "s?listen.group = http?listen.group = www?" /etc/php/php-fpm.d/www.conf
### Only start PHP-FPM service after file system target
/usr/bin/sed -i '/\[Service\]/a After=local-fs.target' /lib/systemd/system/php-fpm.service

## PHP extras
/usr/bin/pacman -S --noconfirm --needed pkg-config php-gd php-apcu nginx-mod-headers-more fcgiwrap php-imagick php-intl php-pspell
e="$?"; [[ "$e" = "0" ]] || /usr/bin/echo 'Failed: !!'; exit "$e"

## Services
/usr/bin/systemctl enable nginx; wait
/usr/bin/systemctl start nginx; wait
/usr/bin/systemctl enable php-fpm; wait
/usr/bin/systemctl start php-fpm; wait
/usr/bin/systemctl enable cronie; wait
/usr/bin/systemctl start cronie; wait

# MySQL (viz MariaDB)
/usr/bin/pacman -S --noconfirm --needed mariadb
e="$?"; [[ "$e" = "0" ]] || /usr/bin/echo 'Failed: !!'; exit "$e"
/usr/bin/mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
/usr/bin/pacman -S --noconfirm --needed perl-dbd-mysql # For Spamassassin's database
## Start it now so it works when we run the secure installation
/usr/bin/systemctl enable mariadb; wait
/usr/bin/systemctl start mariadb; wait
## Set password before securing
/usr/bin/mariadb -e "SET PASSWORD FOR root@localhost = PASSWORD('${mysqlpass}');FLUSH PRIVILEGES;"
## Secure
/usr/bin/mariadb-secure-installation <<EOF
${mysqlpass}
y
n
y
y
y
y
EOF
## Alternate method of above Secure
#/usr/bin/printf "${mysqlpass}\n y\n n\n y\n y\n y\n y\n" | /usr/bin/mariadb-secure-installation

#DEV since we started using mariadb on Arch, this wasn't needed anymore
## MySQL conf for Postfix Admin
#/usr/bin/echo "##### Added by inkVerb ######
# This removes NO_ZERO_IN_DATE and NO_ZERO_DATE, which cause problems for
# Postfix Admin code, from strict mode.
#sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
##### End inkVerb #####
#" >> /etc/my.cnf

# Prepare a MariaDB/MySQL service file and remove memory limits
/usr/bin/cp /lib/systemd/system/mariadb.service /etc/systemd/system/
/usr/bin/sed -i 's/^LimitNOFILE=/#LimitNOFILE=/' /etc/systemd/system/mariadb.service
/usr/bin/sed -i 's/^LimitMEMLOCK=/#LimitMEMLOCK=/' /etc/systemd/system/mariadb.service
/usr/bin/echo "LimitNOFILE=infinity
LimitMEMLOCK=infinity" >> /etc/systemd/system/mariadb.service

/usr/bin/systemctl restart mariadb; wait

# Firewall web ports
/usr/bin/ufw allow 80/tcp
/usr/bin/ufw allow 443/tcp

## tmp folder for a secure PHP
/usr/bin/mkdir -p /srv/www/tmp
/usr/bin/chmod -R 777 /srv/www/tmp

## Create vip & vsftp web mod directories
/usr/bin/mkdir -p /srv/vip
/usr/bin/mkdir -p /srv/vip/_domains
/usr/bin/mkdir -p /srv/vip/_filecabinet
/usr/bin/mkdir -p /srv/vip/ftpusers
/usr/bin/mkdir -p /srv/vip/files
/usr/bin/mkdir -p /srv/vip/sql
/usr/bin/mkdir -p /srv/vip/repo
/usr/bin/mkdir -p /srv/vip/_webapps
/usr/bin/mkdir -p /srv/vip/_subs.vip
/usr/bin/ln -sfn /srv/vip /srv/www/
/usr/bin/ln -sfn /srv/vip /opt/verb/boss/
/usr/bin/ln -sfn /srv/vip /root/
## And the domains directory for hosted domains
/usr/bin/mkdir -p /srv/www/verb
/usr/bin/mkdir -p /srv/www/domains
/usr/bin/mkdir -p /srv/www/forwards
## Create inkVerb app directories
/usr/bin/mkdir -p /srv/www/email
/usr/bin/mkdir -p /srv/www/one
/usr/bin/mkdir -p /srv/www/vapps
## Create directory for Ghost installs
/usr/bin/mkdir -p /srv/www/ghost
## Own everything
/usr/bin/chown -R www:www /srv/www
/usr/bin/chown -R www:www /srv/vip

# inkGet repo
/usr/bin/mkdir -p /opt/verb/repo

#DEV moved to setup
# # MySQL superuser to auto-create databases
# /usr/bin/mariadb -uroot -p${mysqlpass} -e "
# CREATE USER mysqlboss@localhost;
# SET PASSWORD FOR mysqlboss@localhost=PASSWORD('${mysqlbosspass}');
# GRANT ALL PRIVILEGES ON *.* TO 'mysqlboss'@'localhost' IDENTIFIED BY '${mysqlbosspass}' WITH GRANT OPTION;
# FLUSH PRIVILEGES;"
# ## Set the mysqlboss as the mysqlboss config file so the password is not in the line command
# /usr/bin/echo "[client]
# user = mysqlboss
# password = ${mysqlbosspass}
# host = localhost" > /opt/verb/conf/sql/mysqlboss.cnf

# Monit
/usr/bin/pacman -S --noconfirm --needed monit
e="$?"; [[ "$e" = "0" ]] || /usr/bin/echo 'Failed: !!'; exit "$e"
## Copy configs (These seem to have precedence, files in /etc/monit seem to conflict with them but may be u/usr/bin/sed instead
/usr/bin/mkdir -p /etc/monit/monitrc.d
#/usr/bin/sed -i "s?#  include /etc/monit.d?  include /etc/monit/monit.d?" /etc/monitrc
/usr/bin/echo "include /etc/monit/monitrc.d/*" >> /etc/monitrc
/usr/bin/cp /opt/verb/conf/lib/monit/monitrc.d/mysql /etc/monit/monitrc.d/
/usr/bin/cp /opt/verb/conf/lib/monit/monitrc.d/nginx /etc/monit/monitrc.d/
# These have their own monitoring resources and monit will conflict
# /usr/bin/cp /opt/verb/conf/lib/monit/monitrc.d/acpid /etc/monit/monitrc.d/
# /usr/bin/cp /opt/verb/conf/lib/monit/monitrc.d/memcached /etc/monit/monitrc.d/
# /usr/bin/cp /opt/verb/conf/lib/monit/monitrc.d/sshd /etc/monit/monitrc.d/
/usr/bin/systemctl enable monit; wait
/usr/bin/systemctl start monit; wait

# Server type
/usr/bin/echo 'ServerType="lemp"' > /opt/verb/inst/servertype

# Pre-install Go (may be redundand as Go is a dependency in make-preverber)
/usr/bin/pacman -S --noconfirm --needed go
e="$?"; [[ "$e" = "0" ]] || /usr/bin/echo 'Failed: !!'; exit "$e"

# Pre-install Postfix server packages
/usr/bin/pacman -S --noconfirm --needed postfix postfix-mysql dovecot pigeonhole mailutils cyrus-sasl opendkim msmtp
e="$?"; [[ "$e" = "0" ]] || /usr/bin/echo 'Failed: !!'; exit "$e"

# Pre-install inkCert-LE
/usr/bin/pacman -S --noconfirm --needed certbot certbot-nginx
e="$?"; [[ "$e" = "0" ]] || /usr/bin/echo 'Failed: !!'; exit "$e"

# Pre-install inkDNS
/usr/bin/pacman -S --noconfirm --needed bind dnsutils certbot-dns-rfc2136
e="$?"; [[ "$e" = "0" ]] || /usr/bin/echo 'Failed: !!'; exit "$e"

# Pre-install vsftpd
/usr/bin/pacman -S --noconfirm --needed vsftpd
e="$?"; [[ "$e" = "0" ]] || /usr/bin/echo 'Failed: !!'; exit "$e"

# Remove unneeded packages
/usr/bin/pacman -Qdt --noconfirm
/usr/bin/pacman -Scc --noconfirm
/usr/bin/su worker -c '/usr/bin/yay -Scc --noconfirm'
#/usr/local/bin/yeo -Scc --noconfirm

# Restart Server and reconnect at the new port
/usr/bin/echo "
The Verber™ server has been made and is ready to run setup.

You must first reboot the server using:

reboot
"

# Delete this one-time script
/usr/bin/rm -f /opt/verb/inst/make-verber-*
