#!/usr/bin/sh
#inkVerbMaker! verb.ink

# This prepares the early settings for the name286.verb.ink or custom Domain Mod server necessary to make the Verber
## This currently takes no parameters
## This is intended as final prep for the "proper" snapshot image Verbers are created from
### So, it should not be run on "proper" Verber install, but only if from a raw OS image
### This still needs a fresh run of: cd /opt && git clone https://github.com/inkverb/verb
## The basic purpose is to:
### install tools
### set bashrc style
### configure locale

# How to use:
## ./make-preverber


# File check
if [ ! -f "/opt/verb/inst/make-preverber" ]; then
  /usr/bin/echo "Put the verb directory at /opt/verb first, then try again."
exit 8; fi

# Locale
/usr/bin/cp /etc/locale.gen /etc/locale.gen.orig
/usr/bin/echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
/usr/bin/localectl set-locale LANG=en_US.UTF-8
/usr/bin/locale-gen

# Update Keyring
/usr/bin/pacman -Sy archlinux-keyring --noconfirm
# Update Packages
/usr/bin/pacman -Syyu --noconfirm --needed

# Install tools (tmux for unstable ssh connections, reconnect with tmux attach)
/usr/bin/pacman -S --noconfirm --needed tmux ntp pwgen zip unzip htop which vim curl rsync wget make cronie gcc autoconf imagemagick git parted perl net-tools inetutils man sudo
e="$?"; [[ "$e" = "0" ]] || ( /usr/bin/echo 'Failed: !!' && exit "$e" )

# Enable NTP for accurate time (the standard service is commented below)
#/usr/bin/systemctl enable --now systemd-timesyncd
/usr/bin/systemctl enable --now ntpd

#DEV Only use this line in the future if some trouble arises, but IPv6 access should be tested prior to installing verb
# Make sure we don't get a "No rout to host" error when connecting via IPv6 (this config is optional and can mess with stuff)
#/usr/bin/rm -f /etc/dhcpcd.conf

# Firewall
/usr/bin/pacman -S --noconfirm --needed ufw
e="$?"; [[ "$e" = "0" ]] || ( /usr/bin/echo 'Failed: !!' && exit "$e" )
# Set for IPV6 (should be set already, but just to be sure)
/bin/sed -i "s/IPV6=.*/IPV6=yes/" /etc/default/ufw
#DEV should not need to disable and enable since we haven't even started it yet
# /usr/bin/ufw disable
# /usr/bin/echo y | /usr/bin/ufw enable
/usr/bin/systemctl enable ufw; wait
/usr/bin/systemctl start ufw; wait

# Remove unneeded packages
/usr/bin/pacman -Rsc --noconfirm
/usr/bin/pacman -Scc --noconfirm

# Set the prompt style
/opt/verb/serfs/setbashrc
/opt/verb/serfs/setbashrc root

# Vim preferences for root
/usr/bin/echo 'nnoremap <C-c> "+y
vnoremap <C-c> "+y
nnoremap <C-p> "+p
vnoremap <C-p> "+p
syntax on
set number' > /root/.vimrc
## Make them global, except line numbers
/usr/bin/echo 'nnoremap <C-c> "+y
vnoremap <C-c> "+y
nnoremap <C-p> "+p
vnoremap <C-p> "+p
syntax on' >> /etc/vimrc
# >> /usr/share/vim/vimfiles/archlinux.vim # The main file for Arch

# SSH security
/usr/bin/sed -i "s/#PasswordAuthentication yes/PasswordAuthentication no/" /etc/ssh/sshd_config
/usr/bin/sed -i "s/#PermitRootLogin.*/PermitRootLogin prohibit-password/" /etc/ssh/sshd_config

# Good housekeeping
/usr/bin/chmod 750 /opt/verb/serfs/*

# Prep for root convenience
/usr/bin/ln -s /opt/verb /root/

# Security check
/opt/verb/serfs/setsecure; wait

# Woker user (for yay, etc)
/usr/bin/groupadd www
/usr/bin/groupadd worker
/usr/bin/useradd -g worker worker
#/usr/bin/usermod -a -G wheel worker # Should not be necessary with the sudoers.d/ entry
/usr/bin/usermod -a -G www worker
/usr/bin/mkdir -p /opt/verb/worker
/usr/bin/chown -R worker:worker /opt/verb/worker
/usr/bin/usermod -d /opt/verb/worker worker
/usr/bin/echo 'worker ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/worker
/usr/bin/usermod -L worker
/usr/bin/chsh -s /usr/sbin/bash worker 1> /dev/null 2>& 1 # It generates STDOUT and STDERR

# Let's use sudo
/usr/bin/groupadd sudo
/usr/bin/sed -i "s?# %sudo\tALL=(ALL) ALL?%sudo\tALL=(ALL) ALL?" /etc/sudoers

# AUR package manager
/usr/bin/pacman -S --noconfirm --needed base-devel # Dependencies
e="$?"; [[ "$e" = "0" ]] || ( /usr/bin/echo 'Failed: !!' && exit "$e" )
cd /opt/verb/worker || exit 6
/usr/bin/su worker -c '/usr/bin/git clone https://aur.archlinux.org/yay-bin.git'
cd yay-bin || exit 6
/usr/bin/su worker -c '/usr/bin/makepkg -si --noconfirm'
cd .. || exit 6
/usr/bin/rm -rf yay-bin

# Let's use the yeo helper
/usr/bin/ln -sfn /opt/verb/donjon/yeo.sh /usr/local/bin/yeo

# Update yay
/usr/bin/su worker -c '/usr/bin/yay -Syyu --noconfirm'
#/usr/local/bin/yeo -Syyu --noconfirm

## Now, use this to run non-root commands:
### /usr/bin/su worker -c '/usr/bin/yay --noconfirm -S some-package'
### /usr/bin/su worker -c '/path/to/command arg1 arg2 -etc'

# No managed /etc/hosts file
## Comment any current statement
if /usr/bin/grep -q "^\s*manage_etc_hosts:" /etc/cloud/cloud.cfg; then
  /usr/bin/sed -i "s/^\s*manage_etc_hosts:/#manage_etc_hosts:/" /etc/cloud/cloud.cfg
fi
## Add our own statement
/usr/bin/echo "manage_etc_hosts: false" >> /etc/cloud/cloud.cfg

# Remove unneeded packages
/usr/bin/pacman -Rsc --noconfirm
/usr/bin/pacman -Scc --noconfirm
/usr/bin/su worker -c '/usr/bin/yay -Scc --noconfirm'
/usr/bin/su worker -c '/usr/bin/yay -Yc --noconfirm'
wait

# Delete this one-time script
/usr/bin/rm -f /opt/verb/inst/make-preverber

# Restart Server and reconnect at the new port
/usr/bin/echo "
Pre-install is finished and is ready to run make-verber-*.

Run: reboot

Then log back onto the server to run make-verber-*."

# Restart SSH after everything in case it disconnects
/usr/bin/systemctl restart sshd
