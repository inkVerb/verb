user www www;

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name cloud.blueURI286;

  # Path to the root of your installation
  root /srv/www/vapps/nextcloud;
  #autoindex on; #DEV attempting to allow symlinks, remove if not needed on mounted installations

  ssl_certificate /etc/ssl/server/server.crt;
  ssl_certificate_key /etc/ssl/server/server.key;
  ssl_dhparam /etc/ssl/server/dhparams.pem;
  #INKVERB-INKCERT=INK_NOT_YET

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Make a regex exception for `/.well-known` so that clients can still
    # access it despite the existence of the regex rule
    # `location ~ /(\.|autotest|...)` which would otherwise handle requests
    # for `/.well-known`.
    location ^~ /.well-known {
      location = /.well-known/carddav { 
         #return 301 $scheme://$host/remote.php/dav; #New config update replacement
         return 301 /remote.php/dav/;
      }
      location = /.well-known/caldav {
         #return 301 $scheme://$host/remote.php/dav; #New config update replacement
         return 301 /remote.php/dav/;
      }
      #location ~ /.well-known/acme-challenge { #New config update replacement
      location /.well-known/acme-challenge {
         #allow all; #New config update replacement
         try_files $uri $uri/ =404;
      }
      location /.well-known/pki-validation {
         try_files $uri $uri/ =404;
      }

      # Let Nextcloud's API for `/.well-known` URIs handle all other
      # requests by passing them to the front-end controller.
      return 301 /index.php$request_uri;
    }

    # set max upload size
    client_max_body_size 1000M;
    client_body_timeout 300s;
    fastcgi_buffers 64 4K;

    # Disable gzip to avoid the removal of the ETag header
    #gzip off;

    # Enable gzip but do not remove ETag headers
    gzip on;
    gzip_vary on;
    gzip_comp_level 4;
    gzip_min_length 256;
    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
    gzip_types application/atom+xml text/javascript application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

    # Pagespeed is not supported by Nextcloud, so if your server is built
    # with the `ngx_pagespeed` module, uncomment this line to disable it.
    #pagespeed off;

    # The settings allows you to optimize the HTTP2 bandwitdth.
    # See https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements/
    # for tunning hints
    client_body_buffer_size 512k;

    # HTTP response headers borrowed from Nextcloud `.htaccess`
    add_header Referrer-Policy                   "no-referrer"       always;
    add_header X-Content-Type-Options            "nosniff"           always;
    add_header X-Download-Options                "noopen"            always;
    add_header X-Frame-Options                   "SAMEORIGIN"        always;
    add_header X-Permitted-Cross-Domain-Policies "none"              always;
    add_header X-Robots-Tag                      "noindex, nofollow" always;
    add_header X-XSS-Protection                  "1; mode=block"     always;

    # Remove X-Powered-By, which is an information leak
    fastcgi_hide_header X-Powered-By;

    # Add .mjs as a file extension for javascript
    # Either include it in the default mime.types list
    # or include you can include that list explicitly and add the file extension
    # only for Nextcloud like below:
    #include mime.types;
    #types {
    #    text/javascript js mjs;
    #}
    #DEV js mjs are already in Nginx mimetypes and produce an error if here also

    # Specify how to handle directories -- specifying `/index.php$request_uri`
    # here as the fallback means that Nginx always exhibits the desired behaviour
    # when a client requests a path that corresponds to a directory that exists
    # on the server. In particular, if that directory contains an index.php file,
    # that file is correctly served; if it doesn't, then the request is passed to
    # the front-end controller. This consistent behaviour means that we don't need
    # to specify custom rules for certain paths (e.g. images and other assets,
    # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus
    # `try_files $uri $uri/ /index.php$request_uri`
    # always provides the desired behaviour.
    index index.php index.html /index.php$request_uri;

    
    error_page 403 /core/templates/403.php;
    error_page 404 /core/templates/404.php;
    
#replaced
#     location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) {
#        disable_symlinks off;
#        include fastcgi_params;
#        fastcgi_split_path_info ^(.+\.php)(/.*)$;
#        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#        #DEV solve the broken when mounted problem
#       #  fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
#       #  fastcgi_param DOCUMENT_ROOT $realpath_root;
#        #DEV
#        fastcgi_param PATH_INFO $fastcgi_path_info;
#        #Avoid sending the security headers twice
#        fastcgi_param modHeadersAvailable true;
#        fastcgi_param front_controller_active true;
#        fastcgi_pass unix:/run/nextcloud/nextcloud.sock;
#        fastcgi_intercept_errors on;
#        fastcgi_request_buffering off;
#     }

#     location ~ ^/(?:updater|ocs-provider)(?:$|/) {
#        disable_symlinks off;
#        try_files $uri/ =404;
#        index index.php;
#     }
#replaced
#     # Adding the cache control header for js and css files
#     # Make sure it is BELOW the PHP block
#     location ~* \.(?:css|js)$ {
#         disable_symlinks off;
#         try_files $uri /index.php$uri$is_args$args;
#         add_header Cache-Control "public, max-age=7200";
#         # Add headers to serve security related headers (It is intended to
#         # have those duplicated to the ones above)
#    #     add_header X-Content-Type-Options nosniff;
#    #     add_header X-XSS-Protection "1; mode=block";
#    #     add_header X-Robots-Tag none;
#    #     add_header X-Download-Options noopen;
#    #     add_header X-Permitted-Cross-Domain-Policies none;
#         # Optional: Don't log access to assets
#         access_log off;
#    }
#
#    location ~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ {
#         disable_symlinks off;
#         try_files $uri /index.php$uri$is_args$args;
#         # Optional: Don't log access to other assets
#         access_log off;
#    }

#new
    location ~ \.php(?:$|/) {
        # Required for legacy support
        rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+|.+\/richdocumentscode\/proxy) /index.php$request_uri;

    #    disable_symlinks off;

        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        set $path_info $fastcgi_path_info;

    #    try_files $fastcgi_script_name =404;

        include fastcgi_params;
      #  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $path_info;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        #fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param HTTPS on; 

        fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
        fastcgi_param front_controller_active true;     # Enable pretty urls
        fastcgi_pass unix:/run/nextcloud/nextcloud.sock;
        fastcgi_intercept_errors on; 
        fastcgi_request_buffering off;

        fastcgi_max_temp_file_size 0;
    }   

    location ~ \.(?:css|js|mjs|svg|gif|png|jpg|ico|wasm|tflite|map)$ {
         try_files $uri /index.php$request_uri;
#         add_header Cache-Control "public, max-age=15778463, $asset_immutable";
         access_log off;     # Optional: Don't log access to assets

         # Duplicate those above
         add_header Referrer-Policy                   "no-referrer"       always;
         add_header X-Content-Type-Options            "nosniff"           always;
         add_header X-Download-Options                "noopen"            always;
         add_header X-Frame-Options                   "SAMEORIGIN"        always;
         add_header X-Permitted-Cross-Domain-Policies "none"              always;
         add_header X-Robots-Tag                      "noindex, nofollow" always;
         add_header X-XSS-Protection                  "1; mode=block"     always;


         location ~ \.wasm$ {
            default_type application/wasm;
         }   
    }   

    location ~ \.woff2?$ {
        try_files $uri /index.php$request_uri;
        expires 7d;         # Cache-Control policy borrowed from `.htaccess`
        access_log off;     # Optional: Don't log access to assets
    }

    location / {
        rewrite ^ /index.php$uri; #New config update replacement
    #    try_files $uri $uri/ /index.php$request_uri; # This breaks the server
        # Rule borrowed from `.htaccess` to handle Microsoft DAV clients
        if ( $http_user_agent ~ ^DavClnt ) {
            return 302 /remote.php/webdav/$is_args$args;
        }
    }
    # Rule borrowed from `.htaccess`
    location /remote {
        return 301 /remote.php$request_uri;
    }

   #New config update replacement
    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
       deny all;
    }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
       deny all;
     }
    # Rules borrowed from `.htaccess` to hide certain paths from clients
    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  { return 404; }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)                { return 404; }
  
  error_log /var/log/nginx/blue.cloud-error_log warn;

}

# Redirect all http to https
server {
  listen 80;
  listen [::]:80;
  server_name cloud.blueURI286;

  return 301 https://$host$request_uri;
}

# Redirect all www to domain
server {
  server_name www.blueURI286;
  return 301 https://cloud.blueURI286\$request_uri;
}
