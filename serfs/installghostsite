#!/usr/bin/bash
#inkVerbSerf! verb.ink

# This installs ghost as an app to permanently replace a pre-created domain, such as domain.com or sub.domain.com
## Docs consulted
### https://ghost.org/docs/hosting/
### https://forum.ghost.org/t/skip-the-mysql-check/50452
### Help https://ghost.org/docs/ghost-cli/


# How to use:
## ./installghostsite [ domain.tld ]  # This will use default usernames and passwords
## ./installghostsite [ domain.tld ] [ dbase - optional ] [ dbuser - optional ] [ dbpassword - optional ]


usagenotes="This installs ghost as an app to permanently replace a pre-created domain, such as domain.com or sub.domain.com"
usageformat="installghostsite [ domain.tld ] [ dbase - optional ] [ dbuser - optional ] [ dbpassword - optional ]"
usageexample="installghostsite inkisaverb.com
installghostsite inkisaverb.com database databaseuser databasepassword"
hierarchy=( primary )
vsetnames=( "Domain" )
vsettypes=( isDomain )
voptnames=( "Database" "Database user" "Database password" )
vopttypes=( isSQLDatabasename isSQLDatabasename isSQLDatabasename )
voptflags=(  )
voptflagpurpose=(  )
dependencyinstall=(  )
prerequesite=(  )
usedby=(  )
useserfs=( inkvmailbox inkcertaddle inkcertaddcb inkcertaddcbsingle inkcertaddsc )
useconfigs=( servernameip servertype )
if [ -n "$infoINKonly" ] && [ "$infoINKonly" = "true" ]; then return 0; fi # Must have for proper usage to not run the full serf
if [ -e "/opt/verb/mods/installghostsite.replace" ]; then . /opt/verb/mods/installghostsite.replace; return 0; fi # Replaces this script
if [ -e "/opt/verb/mods/installghostsite.before" ]; then . /opt/verb/mods/installghostsite.before; fi # Precedes this script


cVappName=ghost

domain=$1
dBase=$2
dBaseUser=$3
dBPassword=$4
cleanName=$(/usr/bin/echo ${domain} | /usr/bin/sed -e 's/\.//g')
cleanDomain=$(/usr/bin/echo ${domain} | /usr/bin/sed "s/\./-/g")

# Basic credential check
if [ -z ${1} ]; then
/usr/bin/echo "You need to set a domain. See \"How to use\" in the serf."
exit 5
fi

# Include settings
. /opt/verb/conf/servernameip
. /opt/verb/conf/servertype

# Check if the domain exists
## Nginx
if [ ${ServerType} = "lemp" ] || [ ${ServerType} = "laemp" ]; then
  if [ ! -e "/opt/verb/conf/webserver/sites-available/nginx/${domain}.conf" ]; then
    /usr/bin/echo "${domain} not found."
    exit 8
  fi
## No Apache
elif [ ${ServerType} = "lamp" ]; then
  /usr/bin/echo "Ghost requires Nginx. Can't be installed on LAMP server."
  exit 5
fi

# Install nvm & Node.js
if [ ! -e "/usr/bin/nodejs" ] || [ ! -e "/usr/bin/npm" ]; then
  /usr/bin/pacman -Syy nodejs npm --needed --noconfirm
fi

# Check the presence of the ghost user
if ! /usr/bin/id -u ghost &>/dev/null; then
  # From make-preverber
  /usr/bin/useradd -r -U ghost
  #/usr/bin/usermod -a -G ghost worker # In case we ever need the worker to be able to perform tasks for ghost
  /usr/bin/mkdir -p /srv/ghost
  /usr/bin/usermod -d /srv/ghost ghost
  /usr/bin/usermod -L ghost
  /usr/bin/chsh -s /usr/bin/nologin ghost 1> /dev/null 2>& 1 # We won't use su -c, but only Systemd to run this, so nologin
  /usr/bin/chown -R ghost:ghost /srv/ghost
fi

# Install Ghost CLI tool package from nvm
if [ ! -e "/usr/bin/ghost" ]; then
  /usr/bin/npm install ghost-cli@latest -g
fi

# Auto database
if [ -z ${4} ]; then
dBPassword=$(/usr/bin/pwgen -s -1 10); fi
if [ -z ${2} ]; then
dBase=gst$(/usr/bin/echo ${cleanName} | /usr/bin/cut -c1-23)$(/usr/bin/pwgen -s -1 6); fi
if [ -z ${3} ]; then
dBaseUser=${dBase}; fi

# Create the database and credentials
/usr/bin/mariadb --defaults-extra-file=/opt/verb/conf/sql/mysqlboss.cnf -e "
CREATE DATABASE  ${dBase};
GRANT ALL PRIVILEGES ON ${dBase}.* TO '${dBaseUser}'@'localhost' IDENTIFIED BY '${dBPassword}';
FLUSH PRIVILEGES;"

# Mail account (100M)
emailPassword=$(/usr/bin/pwgen -s -1 15)
/opt/verb/serfs/inkvmailbox web ${domain} 'Ghost' 104857600 ${emailPassword}

# Determin port 
ghostport=2368
while /usr/bin/netstat -tulpn | /usr/bin/grep LISTEN | /usr/bin/grep -q ${ghostport}; do
  ghostport=$(/usr/bin/expr ${ghostport} + 1)
done

# Email variable
emailUser="web@${domain}"

# Write the config for backup
/usr/bin/echo "appDBase=\"${dBase}\"
appDDBUsr=\"${dBaseUser}\"
appDDBPass=\"${dBPassword}\"
ghostdomain=\"${domain}\"
ghostport=\"${ghostport}\"
ghostemail=\"${emailUser}\"
ghostemailpas=\"${emailPassword}\"
" > /opt/verb/conf/vapps/vapp.${cVappName}.${domain}

# Record the port in the Ghost port inklist
/usr/bin/echo "${domain} ${ghostport}" >> /opt/verb/conf/inklists/ghostserverports

# Set UFW to allow the Ghost port
# /usr/bin/ufw allow ${ghostport} # Maybe not since the port is only used internally

# Remove domain web folder link
/usr/bin/rm -f /srv/www/html/${domain}

# Nginx conf
## Remove irrelevant site configs, back up to-be-replaced configs
if [ ${ServerType} = "laemp" ]; then
  /usr/bin/cp -f /opt/verb/conf/webserver/sites-available/nginx/${domain}.conf /opt/verb/conf/webserver/sites-available/nginx/${domain}-ghosted.conf
  /usr/bin/rm -f /opt/verb/conf/webserver/sites-enabled/httpd/${domain}.conf
  /usr/bin/mv /opt/verb/conf/webserver/sites-available/httpd/${domain}.conf /opt/verb/conf/webserver/sites-available/httpd/${domain}-ghosted.conf
elif [ ${ServerType} = "lemp" ]; then
  /usr/bin/cp -f /opt/verb/conf/webserver/sites-available/nginx/${domain}.conf /opt/verb/conf/webserver/sites-available/nginx/${domain}-ghosted.conf
elif [ ${ServerType} = "lamp" ]; then
  /usr/bin/echo "Ghost requires Nginx. Can't be installed on LAMP server. But, the script shouldn't have gotten this far. Something is wrong."
  exit 5
fi

## Move the Ghost site conf into place
/usr/bin/cp -f /opt/verb/conf/site-files/conf/newnginxghostsite.conf /opt/verb/conf/webserver/sites-available/nginx/${domain}.conf
/usr/bin/sed -i "s/ghostsite286/${domain}/g" /opt/verb/conf/webserver/sites-available/nginx/${domain}.conf
/usr/bin/sed -i "s/ghostport286/${ghostport}/g" /opt/verb/conf/webserver/sites-available/nginx/${domain}.conf

## Re-add certs if they were already installed
if grep -q 'INKVERB-INKCERT=DONE_LE' /opt/verb/conf/webserver/sites-available/nginx/${domain}-ghosted.conf; then
  if [ -e "/etc/inkcert/le/live/${domain}" ]; then
    /opt/verb/serfs/inkcertaddle ${domain}
  else
    echo "inkCert certs were installed, but the actual certs don't seem to exist! This needs looking into, moving on..."
  fi
elif grep -q 'INKVERB-INKCERT=DONE_CB' /opt/verb/conf/webserver/sites-available/nginx/${domain}-ghosted.conf; then
  if [ -e "/etc/inkcert/le/live/${domain}" ]; then
    /opt/verb/serfs/inkcertaddcb ${domain}
  else
    echo "inkCert certs were installed, but the actual certs don't seem to exist! This needs looking into, moving on..."
  fi
elif grep -q 'INKVERB-INKCERT=DONE_CBSINGLE' /opt/verb/conf/webserver/sites-available/nginx/${domain}-ghosted.conf; then
  if [ -e "/etc/inkcert/le/live/${domain}" ]; then
    /opt/verb/serfs/inkcertaddcbsingle ${domain}
  else
    echo "inkCert certs were installed, but the actual certs don't seem to exist! This needs looking into, moving on..."
  fi
elif grep -q 'INKVERB-INKCERT=DONE_SC' /opt/verb/conf/webserver/sites-available/nginx/${domain}-ghosted.conf; then
  if [ -e "/etc/inkcert/sc/live/${domain}" ]; then
    /opt/verb/serfs/inkcertaddsc ${domain}
  else
    echo "inkCert certs were installed, but the actual certs don't seem to exist! This needs looking into, moving on..."
  fi
fi

## Restart web server
if [ ${ServerType} = "laemp" ]; then
  /usr/bin/systemctl restart nginx httpd
elif [ ${ServerType} = "lemp" ]; then
  /usr/bin/systemctl restart nginx
elif [ ${ServerType} = "lamp" ]; then
  /usr/bin/echo "Ghost requires Nginx. So, the script shouldn't have tried to restart Apache. Something is wrong."
  exit 5
fi

# Install ghost
## Create app directory
### Note make the directory owned by worker (ghost-cli must be run by worker as normal user with no-password sudo permissions)
/usr/bin/mkdir -p /srv/ghost/${domain}
/usr/bin/chown -R worker:worker /srv/ghost/${domain}
## MySQL install command (can't be root)
### No --start because we need to sort out user permissions and service first
/usr/bin/su worker -c "export GHOST_NODE_VERSION_CHECK=false; /usr/bin/ghost install --dir=/srv/ghost/${domain} --url=${domain} --port=${ghostport} --ip=127.0.0.1 --mail=SMTP --mailport=465 --mailhost=smtp.${domain} --mailuser=${emailUser} --mailpass=${emailPassword} --db=mysql --dbhost=localhost --dbname=${dBase} --dbuser=${dBaseUser} --dbpass=${dBPassword} --production --no-start --no-setup-systemd --no-setup-nginx --no-setup-ssl --no-setup-linux-user --no-setup-migrate"
## SQLite3 install command (can't be root)
###DEV SQLite3 untested
#/usr/bin/su worker -c "export GHOST_NODE_VERSION_CHECK=false; /usr/bin/ghost install --dir=/srv/ghost/${domain} --url=${domain} --port=${ghostport} --ip=127.0.0.1 --mail=SMTP --mailport=465 --mailhost=smtp.${domain} --mailuser=${emailUser} --mailpass=${emailPassword} --db=sqlite3 --dbpath=content/data/ghost_dev.db --production --no-start --no-setup-systemd --no-setup-nginx --no-setup-ssl --no-setup-linux-user --no-setup-migrate"
if [ "$?" != "0" ]; then /usr/bin/echo 'Ghost install failed: !!'; exit 4; fi
## Now ghost owns the installation so the .service can run it
/usr/bin/chown -R ghost:ghost /srv/ghost/${domain}

# Service
/usr/bin/cat <<EOF > "/lib/systemd/system/ghost_${cleanDomain}.service"
[Unit]
Description=Ghost systemd service for blog: ${domain}
Documentation=https://ghost.org/docs/

[Service]
Type=simple
WorkingDirectory=/srv/ghost/${domain}
User=ghost
Group=ghost
Environment="NODE_ENV=production"
Environment="GHOST_NODE_VERSION_CHECK=false"
ExecStart=/usr/bin/ghost run ${domain}
Restart=always
SyslogIdentifier=ghost_${domain}
StandardOutput=syslog
StandardError=syslog

[Install]
WantedBy=multi-user.target
EOF

/usr/bin/systemctl enable ghost_${cleanDomain}
/usr/bin/systemctl start ghost_${cleanDomain}

# Finish
/usr/bin/echo "Ghost is setup.
Go to https://${domain}/ghost to install."

# Optional server restart
#/usr/bin/echo "But first, wait two minutes for the server to restart."
#sleep 3
#reboot




if [ -e "/opt/verb/mods/installghostsite.after" ]; then . /opt/verb/mods/installghostsite.after; fi # Follows this script
