#!/bin/bash
#inkVerbSerf! verb.ink

# This remote runs inkdnsaddslave on both NS rink slave servers
## This is run automatically by newdomainshell and rinkimportme; it normally should not be run independently
## This cannot import verb domains; use rinkupdateallverbs instead

# How to use:
## ./rinkadddomain [ domain.tld ]

usagenotes="This remote runs inkdnsaddslave on both NS rink slave servers"
usageformat="rinkadddomain [ domain.tld ]"
usageexample="rinkadddomain inkisaverb.com"
hierarchy=( secondary )
vsetnames=( "Domain" )
vsettypes=( isDomain )
voptnames=(  )
vopttypes=(  )
voptflags=(  )
voptflagpurpose=(  )
dependencyinstall=( "Controlled by Rink" )
prerequesite=(  )
usedby=( newdomainshell rinkimportme )
useserfs=(  )
useconfigs=( servernameip )
if [ -n "$infoINKonly" ] && [ "$infoINKonly" = "true" ]; then return 0; fi # Must have for proper usage to not run the full serf
if [ -e "/opt/verb/mods/rinkadddomain.replace" ]; then . /opt/verb/mods/rinkadddomain.replace; return 0; fi # Replaces this script
if [ -e "/opt/verb/mods/rinkadddomain.before" ]; then . /opt/verb/mods/rinkadddomain.before; fi # Precedes this script


slavedomain=$1

# Configs
. /opt/verb/conf/servernameip

# Already configured or allowed rink?
if [ "$RinkConfigured" = "rink" ] && [ -f "/opt/rink/run/addmasterdomain" ]; then
	/opt/rink/run/addmasterdomain ${slavedomain}
	exit 0
elif [ "$RinkConfigured" != "true" ]; then
	echo "Rink NS nameserver keys not configured, DNS nameserver zone files must be updated manually"
	exit 5
fi

# Already served?
## dig our own NS servers to see if already hosted
digns1="$(/usr/bin/dig @${ServerNS1DNS} ${slavedomain} | /usr/bin/grep ^${slavedomain})"
digns2="$(/usr/bin/dig @${ServerNS2DNS} ${slavedomain} | /usr/bin/grep ^${slavedomain})"
if [[ "${digns1}" =~ "${slavedomain}" ]]; then
  domTaken="true"
fi
if [[ "${digns2}" =~ "${slavedomain}" ]]; then
  domTaken="true"
fi
## Log as taken
if [ -n "${domTaken}" ] && [ "${domTaken}" = "true" ]; then
  ### Local record
  /usr/bin/mkdir -p /opt/verb/conf/inkdns/taken
  /usr/bin/touch "/opt/verb/conf/inkdns/taken/${slavedomain}"
  /usr/bin/echo "${slavedomain} :: $(date +'%Y-%m-%d_%H:%M:%S')
  dig1: ${digns1}
  dig2: ${digns2}
  " >> "/opt/verb/conf/inkdns/taken/${slavedomain}"
  ### Rink NS server records
  /usr/bin/ssh -T ns1 <<EOS
/usr/bin/mkdir -p /srv/sns/${ServerName}-${ServerTLD}/domains/taken
/usr/bin/cat <<EOF > /srv/sns/${ServerName}-${ServerTLD}/domains/taken/${slavedomain}_$(date +'%Y-%m-%d_%H:%M:%S')
${slavedomain} :: $(date +'%Y-%m-%d_%H:%M:%S')
  dig1: ${digns1}
  dig2: ${digns2}
EOF
EOS
  e="$?"; [[ "$e" = "0" ]] || exit "$e"
  /usr/bin/echo "Logged ${slavedomain} as taken on NS1"
  /usr/bin/ssh -T ns2 <<EOS
/usr/bin/mkdir -p /srv/sns/${ServerName}-${ServerTLD}/domains/taken
/usr/bin/cat <<EOF > /srv/sns/${ServerName}-${ServerTLD}/domains/taken/${slavedomain}_$(date +'%Y-%m-%d_%H:%M:%S')
${slavedomain} :: $(date +'%Y-%m-%d_%H:%M:%S')
  dig1: ${digns1}
  dig2: ${digns2}
EOF
EOS
  e="$?"; [[ "$e" = "0" ]] || exit "$e"
  /usr/bin/echo "Logged ${slavedomain} as taken on NS2"
  exit 7
## Not taken; remove any taken logs
else
  /usr/bin/rm -f "/opt/verb/conf/inkdns/taken/${slavedomain}"
  /usr/bin/ssh -T ns1 <<EOS
  /usr/bin/rm -f '/srv/sns/${ServerName}-${ServerTLD}/domains/taken/${slavedomain}'*
EOS
  /usr/bin/ssh -T ns2 <<EOS
  /usr/bin/rm -f '/srv/sns/${ServerName}-${ServerTLD}/domains/taken/${slavedomain}'*
EOS
fi

# Served or parked?
if [ -f "/opt/verb/conf/inkdns/zones/db.${slavedomain}" ]; then
  parkserve="served"
elif [ -f "/opt/verb/conf/inkdns/parked/db.${slavedomain}" ]; then
  parkserve="parked"
else
  /usr/bin/echo "${slavedomain} is neither served nor parked here; nothing to do"
  exit 8
fi

# Add the configs to the domains/ folder on the NS nameservers
## We make a fresh/.domain.tld entry so that the nameserver knows we made an update and it will delete the named slave file at /var/named/db.domain.tld
/usr/bin/ssh -T ns1 <<EOS
/usr/bin/cat <<EOF > /srv/sns/${ServerName}-${ServerTLD}/domains/${parkserve}/${slavedomain}
sdnsDomain="${slavedomain}"
sdnsIPv4="${ServerIPv4}"
sdnsIPv4ARPA="${ServerARPAIPv4}"
sdnsIPv6Exp="${ServerExpIPv6}"
sdnsIPv6Cmp="${ServerIPv6}"
sdnsIPv6ARPA="${ServerARPAIPv6}"
EOF
/usr/bin/mkdir -p /srv/sns/${ServerName}-${ServerTLD}/domains/fresh
/usr/bin/touch /srv/sns/${ServerName}-${ServerTLD}/domains/fresh/.${slavedomain}
EOS
e="$?"; [[ "$e" = "0" ]] || exit "$e"
/usr/bin/echo "Added ${slavedomain} to NS1"
/usr/bin/ssh -T ns2 <<EOS
/usr/bin/cat <<EOF > /srv/sns/${ServerName}-${ServerTLD}/domains/${parkserve}/${slavedomain}
sdnsDomain="${slavedomain}"
sdnsIPv4="${ServerIPv4}"
sdnsIPv4ARPA="${ServerARPAIPv4}"
sdnsIPv6Exp="${ServerExpIPv6}"
sdnsIPv6Cmp="${ServerIPv6}"
sdnsIPv6ARPA="${ServerARPAIPv6}"
EOF
/usr/bin/mkdir -p /srv/sns/${ServerName}-${ServerTLD}/domains/fresh
/usr/bin/touch /srv/sns/${ServerName}-${ServerTLD}/domains/fresh/.${slavedomain}
EOS
e="$?"; [[ "$e" = "0" ]] || exit "$e"
/usr/bin/echo "Added ${slavedomain} to NS2"

if [ -e "/opt/verb/mods/rinkadddomain.after" ]; then . /opt/verb/mods/rinkadddomain.after; fi # Follows this script
