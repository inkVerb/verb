#!/bin/bash
#inkVerbSerf! verb.ink

# This downloads and installs WordPress as a vapp with www/html/DOMAIN.TLD link from adddomain
## WordPress actually resides in www/vapps/wp.DOMAIN.TLD
## This progression is necessary to: 1. keep track of domain contents in www/domains and 2. use standard structure for backups
## This does not remove any files an ftpvip may have uploaded to the domain's folder
## Any files conflicting with WordPress will be replaced by the new WordPress installation created by this script
## The domain will automatically be added with DKIM credentials if it has not been already
## This will NOT run inkCert for the domain, but inkCert will be prepped at least and used if inkCert certs already exist.

# All options after the domain are optional, but are sequential

# How to use:
## ./installwp [domain.tld] [dbase] [dbuser] [dbpassword]
## ./installwp [domain.tld]  # This will use default usernames and passwords


usagenotes="This downloads and installs WordPress to a specified domain"
usageformat="installwp [ domain.tld ] [ dbase - optional ] [ dbuser - optional ] [ dbpassword - optional ]"
usageexample="installwp inkisaverb.com
installwp sub.inkisaverb.com
installwp inkisaverb.com somedatabase somedbuser somedbpassword"
hierarchy=( primary )
vsetnames=( "Domain" )
vsettypes=( isDomain )
voptnames=( "Database" "Database user" "Database password" )
vopttypes=( isSQLDatabasename isSQLDatabasename isSQLDatabasename )
voptflags=(  )
voptflagpurpose=(  )
dependencyinstall=(  )
prerequesite=(  )
usedby=(  )
useserfs=( inkdriveapp )
useconfigs=( servertype inkdrive/inkdriveinfo )
if [ -n "$infoINKonly" ] && [ "$infoINKonly" = "true" ]; then return 0; fi # Must have for proper usage to not run the full serf
if [ -e "/opt/verb/mods/installwp.replace" ]; then . /opt/verb/mods/installwp.replace; return 0; fi # Replaces this script
if [ -e "/opt/verb/mods/installwp.before" ]; then . /opt/verb/mods/installwp.before; fi # Precedes this script


cVappName=wp

domain=$1
dBase=$2
dBaseUser=$3
dBPassword=$4
cleanName=$(/bin/echo ${domain} | sed -e 's/\.//g')

# Basic credential check
if [ -z ${1} ]; then
/bin/echo "You must designate a domain. Read the How to use. Can't continue."
exit 8; fi
# Check if already installed
## Config
if [ -f /opt/verb/conf/vapps/vapp.${cVappName}.${domain} ]; then
/bin/echo "This is already installed."
exit 0; fi
## Directory
if [ -d /srv/www/vapps/${cVappName}.${domain} ]; then
/bin/echo "That WordPress site already exists in the system. If it isn't working, look deeper on the server. For now, doing nothing."
exit 0; fi

# Domain presence check
if [ ! -d "/srv/www/domains/${domain}" ]; then
/opt/verb/serfs/adddomain ${domain}
wait
fi

# Download and establish wordpress in the server to pre-created domain
cd /srv/www/vapps || exit 6
/opt/verb/serfs/inkget ${cVappName} check
e="$?"; [[ "$e" = "0" ]] || exit "$e"

# Auto database
if [ -z ${4} ]; then
dBPassword=$(/usr/bin/pwgen -s -1 10); fi
if [ -z ${2} ]; then
dBase=wp$(/bin/echo ${cleanName} | cut -c1-24)$(/usr/bin/pwgen -s -1 6); fi
if [ -z ${3} ]; then
dBaseUser=${dBase}; fi

/bin/mv ${cVappName} ${cVappName}.${domain}
/bin/rm -f /srv/www/html/${domain}
/bin/ln -sfn /srv/www/vapps/${cVappName}.${domain} /srv/www/html/${domain}
/bin/ln -sfn /srv/www/vapps/${cVappName}.${domain} /srv/vip/_webapps/; wait
/bin/chown -R www:www /srv/www/html/${domain}; wait
/bin/chown -R www:www /srv/www/vapps/${cVappName}.${domain}; wait

# Create the database and credentials
/usr/bin/mysql --defaults-extra-file=/opt/verb/conf/mysqlboss.cnf -e "
CREATE DATABASE  ${dBase};
GRANT ALL PRIVILEGES ON ${dBase}.* TO '${dBaseUser}'@'localhost' IDENTIFIED BY '${dBPassword}';
FLUSH PRIVILEGES;"

# Write the config for backup
/bin/echo "#!/bin/bash
APPdBase=${dBase}
appDDBUsr=${dBaseUser}
appDDBPass=${dBPassword}" > /opt/verb/conf/vapps/vapp.${cVappName}.${domain}

# Put the settings in the WordPress config file
cd wp.${domain} || exit 6
/bin/cp wp-config-sample.php wp-config.php
/bin/sed -i "s/database_name_here/${dBase}/g" wp-config.php
/bin/sed -i "s/username_here/${dBaseUser}/g" wp-config.php
/bin/sed -i "s/password_here/${dBPassword}/g" wp-config.php
/bin/echo "
/** inkVerb Sets the URL */
define( 'WP_SITEURL', 'https://${domain}' );
define( 'WP_HOME', 'https://${domain}' );" >> wp-config.php

# Add the secure salt and key strings
/opt/verb/serfs/setsecurewp ${domain}

#### fixhttps already done?
if /bin/grep -q '##INKHTTPSFIX=fixed' /opt/verb/conf/webserver/sites-available/httpd/${domain}.conf; then
/bin/sed -i "/WP_SITEURL/d" /srv/www/vapps/wp.${domain}/wp-config.php
/bin/sed -i "/WP_HOME/d" /srv/www/vapps/wp.${domain}/wp-config.php
/bin/echo "define( 'WP_SITEURL', 'https://${domain}' );
define( 'WP_HOME', 'https://${domain}' );" >> /srv/www/vapps/wp.${domain}/wp-config.php
fi

# Reset all permissions and restart webserver
/bin/chown -R www:www /srv/www/vapps/${cVappName}.${domain}
. /opt/verb/conf/servertype
if [ ${ServerType} = "lemp" ]; then
  /usr/bin/systemctl restart nginx
elif [ ${ServerType} = "lamp" ]; then
  /usr/bin/systemctl restart httpd
elif [ ${ServerType} = "laemp" ]; then
  /usr/bin/systemctl restart httpd
  /usr/bin/systemctl restart nginx
fi

# Finish
/usr/bin/echo "These are setup:

Database: ${dBase}
Database user: ${dBaseUser}
Database password: ${dBPassword}

Go to https://${domain}/wp-admin/index.php to install.
"

# inkDrive? (last so above message shows, even if we need to exit non-zero next)
if [ -f "/opt/verb/conf/inkdrive/inkdriveinfo" ]; then
  . /opt/verb/conf/inkdrive/inkdriveinfo
fi
if [ "${InkDriveWP}" != "off" ]; then
  /usr/bin/echo "Mounting 'wp-content' to a drive..."
  /opt/verb/serfs/inkdriveapp "${cVappName}.${domain}" "${InkDriveWP}"
  if [ "$?" = 0 ]; then
    /usr/bin/echo "InkDrive=\"${InkDriveWP}\"" >> /opt/verb/conf/vapps/vapp.${cVappName}.${domain}
  else
    /usr/bin/echo "inkDrive hosting is expected, but unable to host WP on the drive. Something is very wrong!"
    exit 6
  fi
fi



if [ -e "/opt/verb/mods/installwp.after" ]; then . /opt/verb/mods/installwp.after; fi # Follows this script
